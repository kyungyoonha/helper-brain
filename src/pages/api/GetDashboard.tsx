import { NextApiRequest, NextApiResponse } from "next";

import { GoogleSpreadsheet } from "google-spreadsheet";
import { JWT } from "google-auth-library";
import { Neuron } from "@/types";
import dayjs from "dayjs";

const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL?.replace(/\\n/gm, "\n"),
  key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/gm, "\n"),
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

const doc = new GoogleSpreadsheet(
  process.env.GOOGLE_SHEET_ID?.replace(/\\n/gm, "\n") as string,
  serviceAccountAuth
);

export interface GetDashboardResult {
  ok: boolean;
  error?: any;
  data?: any;
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<GetDashboardResult>
) {
  try {
    await doc.loadInfo();
    let dashboardSheet = doc.sheetsByTitle["DASHBOARD"];
    let dashboardRows = await dashboardSheet.getRows();
    let dashboardList = dashboardRows.map((row) => row.toObject());
    let updatedAt = dayjs(new Date()).format("YYYY-MM-DD");
    let dashboard = dashboardList.find((item) => item.date === updatedAt);

    if (!dashboard) {
      dashboard = {
        id: "-",
        date: updatedAt,
        totalCorrectCount: 0,
        totalIncorrectCount: 0,
        total: 0,
      };
    }

    res.status(200).json({
      ok: true,
      data: dashboard,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ ok: false, error });
  }
}

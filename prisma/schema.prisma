generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Neuron {
  id          Int       @id @default(autoincrement())
  description String    @db.MediumText
  imageUrl    String?   @db.MediumText
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  score       Int       @default(1)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  answers     Answer[]
  hints       Hint[]
  categories  CategoriesOnNeurons[]
  dashboards  DashboardOnNeurons[]
  
  
  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answer    String   @db.MediumText
  imageUrl  String?   @db.MediumText
  neuron    Neuron   @relation(fields: [neuronId], references: [id], onDelete: Cascade)
  neuronId  Int
  
  @@index([neuronId])
}

model Hint {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hint      String   @db.MediumText
  imageUrl  String?  @db.MediumText
  neuron    Neuron   @relation(fields: [neuronId], references: [id], onDelete: Cascade)
  neuronId  Int

  @@index([neuronId])
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category  String
  neurons   CategoriesOnNeurons[]
}

model CategoriesOnNeurons {
  neuron     Neuron @relation(fields: [neuronId], references: [id])
  neuronId   Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt  DateTime @default(now())

  @@id([neuronId, categoryId])
  @@index([neuronId])
  @@index([categoryId])
}

model DashboardOnNeurons { 
  dashboardCorrectList     Dashboard @relation(name: "dashboardCorrectList", fields: [dashboardCorrectId], references: [id], onDelete: Cascade)
  dashboardCorrectId       Int
  dashboardInCorrectIdList Dashboard @relation(name: "dashboardInCorrectIdList", fields: [dashboardInCorrectIdId], references: [id], onDelete: Cascade)
  dashboardInCorrectIdId   Int
  neuron                   Neuron    @relation(fields: [neuronId], references: [id], onDelete: Cascade)
  neuronId                 Int

  @@id([dashboardCorrectId, dashboardInCorrectIdId, neuronId])
  @@index([dashboardCorrectId])
  @@index([dashboardInCorrectIdId])
  @@index([neuronId])
}


model Dashboard {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  correctNeurons   DashboardOnNeurons[] @relation(name: "dashboardCorrectList")
  incorrectNeurons DashboardOnNeurons[] @relation(name: "dashboardInCorrectIdList")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  neurons       Neuron[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}